openapi: 3.1.0
info:
  title: Worldforge API
  version: "3.0.0"
servers:
  - url: https://worldforge-api.hydremia.workers.dev
paths:
  /health:
    get:
      operationId: health
      responses:
        "200": { description: OK }
  /version:
    get:
      operationId: version
      responses:
        "200": { description: OK }
  /capsule/create:
    post:
      operationId: createCapsule
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token: { type: string }
                seed: { type: object }
              required: [token]
      responses:
        "200": { description: OK }
  /capsule/{token}/runtime:
    get:
      operationId: getRuntime
      parameters:
        - in: path
          name: token
          required: true
          schema: { type: string }
      responses:
        "200": { description: OK }
        "404": { description: Not found }
    put:
      operationId: putRuntime
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: token
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                canonVersion: { type: string }
      responses:
        "200": { description: OK }
  /capsule/{token}/session:
    post:
      operationId: saveSession
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: token
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filename: { type: string }
                markdown: { type: string }
              required: [filename, markdown]
      responses:
        "200": { description: OK }
  /staging/ingest:
    post:
      operationId: ingestStaging
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  description: free-form draft payload
                  type: object
      responses:
        "200": { description: OK }
  /visuals/ingest:
    post:
      operationId: ingestVisual
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: { type: string }
                prompt: { type: string }
                tags:
                  type: array
                  items: { type: string }
      responses:
        "200": { description: OK }
  /visuals/{id}:
    get:
      operationId: getVisualsById
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200": { description: OK }
  /audit:
    post:
      operationId: audit
      security: [{ bearerAuth: [] }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dummy: { type: string }
      responses:
        "200": { description: OK }
components:
  schemas: {}
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
